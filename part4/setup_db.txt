import os
from app import create_app
from sqlalchemy import text
from app.models.user import User
from app.extensions import db, bcrypt

SQL_SCRIPT_PATH = "hbnb_schema.sql"

def reset_database():
    """R√©initialise la base de donn√©es SQLite."""
    print("üîÑ R√©initialisation de la base de donn√©es SQLite...")
    db_path = os.getenv("DATABASE_URL", "sqlite:///hbnb.db").replace("sqlite:///", "")

    # Supprimer l'ancienne base de donn√©es si elle existe
    if os.path.exists(db_path):
        os.remove(db_path)
        print(f"üóëÔ∏è Base de donn√©es supprim√©e : {db_path}")

    app = create_app()
    with app.app_context():
        db.create_all()  # Cr√©e les tables d√©finies dans les mod√®les
        print("‚úÖ Tables cr√©√©es avec succ√®s.")

        # Ex√©cuter le script SQL pour ins√©rer des donn√©es initiales
        try:
            with open(SQL_SCRIPT_PATH, "r") as sql_file:
                sql_commands = sql_file.read().split(";")
                for command in sql_commands:
                    if command.strip():
                        db.session.execute(text(command.strip()))
                db.session.commit()
            print("‚úÖ Donn√©es initiales ins√©r√©es avec succ√®s.")
        except Exception as e:
            print(f"‚ùå ERREUR LORS DE L'EX√âCUTION DU SCRIPT SQL : {e}")

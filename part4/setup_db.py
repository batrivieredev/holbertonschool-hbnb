#!/usr/bin/env python3
"""Script d'initialisation de la base de donn√©es"""
import os
from app import create_app
from app.extensions import db, init_db_events
from app.models.user import User
from app.models.place import Place
from app.models.review import Review
from app.models.amenity import Amenity
from app.models.place_photo import PlacePhoto

def create_sample_data():
    """Cr√©e des donn√©es d'exemple pour la base de donn√©es"""
    try:
        # Cr√©ation de quelques utilisateurs propri√©taires
        owners = [
            User(
                first_name="Jean",
                last_name="Dupont",
                email="jean.dupont@example.com",
                is_admin=False
            ),
            User(
                first_name="Marie",
                last_name="Martin",
                email="marie.martin@example.com",
                is_admin=False
            ),
            User(
                first_name="Pierre",
                last_name="Bernard",
                email="pierre.bernard@example.com",
                is_admin=False
            )
        ]

        for owner in owners:
            owner.hash_password('password123')
            db.session.add(owner)

        # R√©cup√©ration des √©quipements pour les associer aux places
        amenities = Amenity.query.all()

        # Cr√©ation des places
        places = [
            {
                "name": "Villa avec piscine",
                "description": "Magnifique villa avec piscine priv√©e et jardin",
                "number_rooms": 4,
                "number_bathrooms": 2,
                "max_guest": 8,
                "price_by_night": 250,
                "latitude": 43.610769,
                "longitude": 3.876716,
                "city": "Montpellier",
                "owner": owners[0],
                "amenities": amenities[:5]  # 5 premiers √©quipements
            },
            {
                "name": "Appartement centre-ville",
                "description": "Charmant appartement en plein c≈ìur de Paris",
                "number_rooms": 2,
                "number_bathrooms": 1,
                "max_guest": 4,
                "price_by_night": 150,
                "latitude": 48.856614,
                "longitude": 2.352222,
                "city": "Paris",
                "owner": owners[1],
                "amenities": amenities[2:7]  # 5 √©quipements diff√©rents
            },
            {
                "name": "Maison de campagne",
                "description": "Maison traditionnelle au calme avec grand terrain",
                "number_rooms": 3,
                "number_bathrooms": 2,
                "max_guest": 6,
                "price_by_night": 180,
                "latitude": 45.764043,
                "longitude": 4.835659,
                "city": "Lyon",
                "owner": owners[2],
                "amenities": amenities[5:]  # derniers √©quipements
            }
        ]

        for place_data in places:
            place = Place(
                name=place_data["name"],
                description=place_data["description"],
                number_rooms=place_data["number_rooms"],
                number_bathrooms=place_data["number_bathrooms"],
                max_guest=place_data["max_guest"],
                price_by_night=place_data["price_by_night"],
                latitude=place_data["latitude"],
                longitude=place_data["longitude"],
                city=place_data["city"],
                owner=place_data["owner"]
            )
            place.amenities.extend(place_data["amenities"])
            db.session.add(place)

        db.session.commit()
        print("‚úÖ Donn√©es d'exemple cr√©√©es avec succ√®s.")
        return True

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple: {str(e)}")
        return False

def init_db(app):
    """Initialise la base de donn√©es et cr√©e les tables si n√©cessaire"""
    print("üîÑ V√©rification de la base de donn√©es...")

    # Cr√©ation du dossier d'instance si n√©cessaire
    if not os.path.exists(app.instance_path):
        print(f"üìÅ Cr√©ation du dossier {app.instance_path}")
        os.makedirs(app.instance_path)

    db_path = os.path.join(app.root_path, 'hbnb.db')
    if not os.path.exists(db_path):
        print("üìÅ Cr√©ation de la nouvelle base de donn√©es...")

        # Active le support des cl√©s √©trang√®res pour SQLite
        init_db_events()

        # Cr√©ation des tables
        with app.app_context():
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s.")

        # Cr√©ation des √©quipements par d√©faut
        with app.app_context():
            default_amenities = [
                "WiFi", "Climatisation", "Chauffage", "Cuisine",
                "TV", "Parking gratuit", "Lave-linge", "Piscine",
                "Jacuzzi", "Salle de sport"
            ]

            for name in default_amenities:
                if not Amenity.query.filter_by(name=name).first():
                    amenity = Amenity(name=name)
                    db.session.add(amenity)

            try:
                db.session.commit()
                print("‚úÖ √âquipements par d√©faut cr√©√©s.")
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erreur lors de la cr√©ation des √©quipements: {str(e)}")
                return False

        print("‚úÖ Configuration initiale de la base de donn√©es termin√©e.")

        # Cr√©ation des donn√©es d'exemple
        if create_sample_data():
            print("‚úÖ Donn√©es d'exemple ajout√©es √† la base de donn√©es.")
        else:
            print("‚ö†Ô∏è √âchec de la cr√©ation des donn√©es d'exemple.")

        return True
    else:
        print("‚úÖ La base de donn√©es existe d√©j√†.")
        return True

def reset_db(app):
    """R√©initialise la base de donn√©es (pour le d√©veloppement uniquement)"""
    print("üîÑ R√©initialisation de la base de donn√©es...")

    db_path = os.path.join(app.root_path, 'hbnb.db')
    if os.path.exists(db_path):
        try:
            os.remove(db_path)
            print("‚úÖ Ancienne base de donn√©es supprim√©e.")
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression de la base: {str(e)}")
            return False

    return init_db(app)

if __name__ == "__main__":
    import sys
    app = create_app()

    if len(sys.argv) > 1 and sys.argv[1] == "--reset":
        if reset_db(app):
            print("‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s.")
        else:
            print("‚ùå √âchec de la r√©initialisation de la base de donn√©es.")
            sys.exit(1)
    else:
        if init_db(app):
            print("‚úÖ Initialisation de la base de donn√©es termin√©e.")
        else:
            print("‚ùå √âchec de l'initialisation de la base de donn√©es.")
            sys.exit(1)

#!/usr/bin/env python3
"""Script d'initialisation de la base de donn√©es"""
import os
from app import create_app
from app.extensions import db, init_db_events
from app.models.user import User
from app.models.place import Place
from app.models.review import Review
from app.models.amenity import Amenity

def init_db(app):
    """Initialise la base de donn√©es et cr√©e les tables si n√©cessaire"""
    print("üîÑ V√©rification de la base de donn√©es...")

    # Cr√©ation du dossier d'instance si n√©cessaire
    if not os.path.exists(app.instance_path):
        print(f"üìÅ Cr√©ation du dossier {app.instance_path}")
        os.makedirs(app.instance_path)

    db_path = os.path.join(app.root_path, 'hbnb.db')
    if not os.path.exists(db_path):
        print("üìÅ Cr√©ation de la nouvelle base de donn√©es...")

        # Active le support des cl√©s √©trang√®res pour SQLite
        init_db_events()

        # Cr√©ation des tables
        with app.app_context():
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s.")

        # Cr√©ation des √©quipements par d√©faut
        with app.app_context():
            default_amenities = [
                "WiFi", "Climatisation", "Chauffage", "Cuisine",
                "TV", "Parking gratuit", "Lave-linge", "Piscine",
                "Jacuzzi", "Salle de sport"
            ]

            for name in default_amenities:
                if not Amenity.query.filter_by(name=name).first():
                    amenity = Amenity(name=name)
                    db.session.add(amenity)

            try:
                db.session.commit()
                print("‚úÖ √âquipements par d√©faut cr√©√©s.")
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erreur lors de la cr√©ation des √©quipements: {str(e)}")
                return False

        print("‚úÖ Configuration initiale de la base de donn√©es termin√©e.")
        return True
    else:
        print("‚úÖ La base de donn√©es existe d√©j√†.")
        return True

def reset_db(app):
    """R√©initialise la base de donn√©es (pour le d√©veloppement uniquement)"""
    print("üîÑ R√©initialisation de la base de donn√©es...")

    db_path = os.path.join(app.root_path, 'hbnb.db')
    if os.path.exists(db_path):
        try:
            os.remove(db_path)
            print("‚úÖ Ancienne base de donn√©es supprim√©e.")
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression de la base: {str(e)}")
            return False

    return init_db(app)

if __name__ == "__main__":
    import sys
    app = create_app()

    if len(sys.argv) > 1 and sys.argv[1] == "--reset":
        if reset_db(app):
            print("‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s.")
        else:
            print("‚ùå √âchec de la r√©initialisation de la base de donn√©es.")
            sys.exit(1)
    else:
        if init_db(app):
            print("‚úÖ Initialisation de la base de donn√©es termin√©e.")
        else:
            print("‚ùå √âchec de l'initialisation de la base de donn√©es.")
            sys.exit(1)
